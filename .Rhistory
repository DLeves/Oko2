install.packages("gtrends")
install.packages("gtrendsR")
library(gtrendsR)
# Google trends-ről 'korányinfó' keresési trend
kinfo = gtrends(keyword = "Kormányinfó", geo = "HU", time = "2021-01-01 2022-12-31")
# Google trends-ről 'korányinfó' keresési trend
kinfo = gtrends(keyword = "Kormányinfó", geo = "HU", time = "2021-01-01 2022-12-31")
# Google trends-ről 'korányinfó' keresési trend
kinfo = gtrends(keyword = "Kormányinfó")
load("/home/leves/Downloads/countries.rda")
View(countries)
# Google trends-ről 'korányinfó' keresési trend
kinfo = gtrends(keyword = "Kormanyinfo")
rm(countries)
install.packages("eurostat")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(eurostat)
library(tidyverse)
library(lmtest)
ab = getSymbols("ATVI", src = "yahoo", auto.assign = F)
View(ab)
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2020-01-01", to = "2022-12-31")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2023-01-01")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2023-01-01")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2020-01-01", to = "2022-12-31")
View(ATVI)
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2022-12-31")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2023-01-01")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2023-01-02")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2019-12-31", to = "2023-01-03")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2020-01-01")
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F)
ab = data.frame(time = index(ATVI), close = as.numeric())
ab = data.frame(time = index(ATVI), close = as.numeric(ATVI$ATVI.Close))
View(ab)
ab = ab[ab$time >= "2020-01-01" && ab$time <= "2022-12-31"]
# ab, mint activision-blizzard
ab = data.frame(time = index(ATVI), close = as.numeric(ATVI$ATVI.Close))
ab = ab[ab$time >= "2020-01-01" && ab$time <= "2022-12-31",]
# ab, mint activision-blizzard
ab = data.frame(time = index(ATVI), close = as.numeric(ATVI$ATVI.Close))
ab = ab[ab$time >= "2020-01-01" & ab$time <= "2022-12-31",]
View(ATVI)
ATVI = getSymbols("ATVI", src = "yahoo", auto.assign = F, from = "2020-04-21")
# ab, mint activision-blizzard
ab = data.frame(time = index(ATVI), close = as.numeric(ATVI$ATVI.Close))
757/3
ggplot(ab, aes(time, close))+
geom_line()+
theme_minimal()
ATVI = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21")
ATVI = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21")
apple = data.frame(time = index(ATVI), close = as.numeric(ATVI$ATVI.Close))
View(ATVI)
AAPL = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21")
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
rm(list = ls())
AAPL = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21")
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
ggplot(apple, aes(time, close))+
geom_line()+
theme_minimal()
AAPL = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21", to = "2023-04-21")
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
AAPL = getSymbols("AAPL", src = "yahoo", auto.assign = F, from = "2020-04-21", to = "2023-04-22")
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AAPL.Close))
Most, hogy ezzel meg is vagyok, ideje ábrázolni.
```{r apple lineplot}
ggplot(apple, aes(time, close))+
geom_line()+
theme_minimal()
library(aTSA)
adf.test(apple$close)
apple$d_close = diff(apple$close)
apple$d_close = c(NA,diff(apple$close))
adf.test(apple$d_close)
acf(apple$d_close)
acf(apple$d_close[-1,])
acf(apple$d_close[-1])
pacf(apple$d_close[-1])
arima010 = arima(apple$close, order = c(0,1,0))
coeftest(arima010)
arima010 = arima(apple$close, order = c(0,1,0))
coeftest(arima010)
coeftest(arima010$coef)
arima010 = arima(apple$close, order = c(0,1,0))
coeftest(arima010)
View(apple)
summary(arima010)
arima010 = arima(apple$close, order = c(0,1,0))
coeftest(arima010)
coeftest(arima010)
arima010 = arima(apple$d_close, order = c(0,0,0))
coeftest(arima010)
arima010 = arima(apple$close, order = c(0,1,0))
coeftest(arima010)
arima010 = arima(AAPL$AAPL.Close, order = c(0,1,0))
coeftest(arima010)
arima010 = arima(apple$close, order = c(1,1,0))
coeftest(arima010)
arima010 = arima(apple$close, order = c(1,1,1))
coeftest(arima010)
arima010 = arima(apple$close, order = c(18,1,18))
arima010 = arima(apple$close, order = c(1,1,1))
coeftest(arima010)
library(forecast)
arima010 = arima(apple$d_close, order = c(0,0,0))
coeftest(arima010)
forecast::auto.arima(apple$close)
coeftest(forecast::auto.arima(apple$close))
forecast::auto.arima(apple$close)
AAPL = getSymbols("AMD", src = "yahoo", auto.assign = F, from = "2020-04-21", to = "2023-04-22")
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AMD.Close))
apple = data.frame(time = index(AAPL), close = as.numeric(AAPL$AMD.Close))
Most, hogy ezzel meg is vagyok, ideje ábrázolni.
```{r apple lineplot}
ggplot(apple, aes(time, close))+
geom_line()+
theme_minimal()
adf.test(apple$close)
adf.test(apple$close)
```{r apple adf}
adf.test(apple$close)
adf.test(apple$close)
```{r apple adf}
adf.test(apple$close)
acf(apple$d_close[-1])
apple$d_close = c(NA,diff(apple$close))
adf.test(apple$d_close)
acf(apple$d_close[-1])
pacf(apple$d_close[-1])
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
??get_eurostat
c = get_eurostat(id = "namq_10_fcs",time_format = "date")
View(c)
levels(c$geo)
levels(as.factor(c$geo))
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit = "CP_MEUR", geo = "BG")
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit == "CP_MEUR", geo == "BG")
View(cBG)
View(cBG)
quarters(cBG$time)
head(cBG)
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit == "CP_MEUR", geo == "BG") %>%
order_by(time)
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit == "CP_MEUR", geo == "BG") %>%
arrange(time)
View(cBG)
cBG$Q = as.factor(quarters(cBG$time))
cBG$Q = as.factor(quarters(cBG$time))
qmtx = cBG$Q
qmtx
qmtx = contrasts(cBG$Q)
View(qmtx)
summary(cBG$Q)
contr.sum(4)
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit == "CP_MEUR", geo == "BG", time >= "2000-01-01") %>%
arrange(time)
cBG$Q = as.factor(quarters(cBG$time))
ggplot(cBG, aes(time, values))+
geom_line()+
theme_minimal()
adf.test(cBG$values)
cBG$d_values = diff(cBG$values)
cBG$d_values = c(NA,diff(cBG$values))
adf.test(cBG$d_values)
acf(cBG$d_values)
acf(cBG$d_values[-1])
acf(cBG$d_values[-1])
View(cBG)
dd_values = c(NA,diff(cBG$values))
adf.test(dd_values)
dd_values = c(NA,diff(cBG$d_values))
adf.test(dd_values)
rm(dd_values)
cBG$dd_values = c(NA, diff(cBG$d_values))
adf.test(cBG$dd_values)
acf(cBG$dd_values[-1])
acf(cBG$dd_values[-2])
acf(cBG$dd_values[-1:2])
cBG$dd_values[-2]
cBG$dd_values[-1:2]
cBG$dd_values[-c(1:2)]
acf(cBG$dd_values[-c(1,2)])
pacf(cBG$dd_values)
pacf(cBG$dd_values[-c(1:2)])
forecast::auto.arima(apple$close)
forecast::auto.arima(cBG$values, xreg = contr.sum(4))
forecast::auto.arima(cBG$values, xreg = cBG$Q)
contrasts(cBG$Q)
forecast::auto.arima(cBG$values, xreg = contrasts(cBG$Q))
forecast::auto.arima(cBG$values)
coefficients(forecast::auto.arima(cBG$values))
coeftest(forecast::auto.arima(cBG$values))
# working directory beállítása
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraryk
library(quantmod)  #Yahoo finance adatokhoz
library(gtrendsR)  #Google trends adatokhoz
library(tidyverse) #ggplot2 + más packegek, ha kellenének
# Yahoo finance-rők az árfolyam lekérése 2021. jan 1-től 2022. dec 31-ig
eurxts = getSymbols("EURHUF=X", src = "yahoo", from = "2021-01-01", to = "2022-12-31", auto.assign = F)
# a Yahoo finance-es adatokből dataframe-ként az idő és az 'highest'(ezt közösen beszéljük meg melyik legyen)
eur = data.frame(time = index(eurxts), eurhuf = as.numeric(eurxts$`EURHUF=X.High`))
# EUR/HUF alap vonaldiagramm, 'theme_minimal'-al
ggplot(eur, aes(x = time))+
geom_line(aes(y = eurhuf, color = "EUR/HUF árfolyam"))+
theme_minimal()
# a 90 napos intervallumokat tartalmazó vektor
t = c("2021-01-01 2021-04-01","2021-04-01 2021-06-30","2021-06-30 2021-10-01","2021-10-01 2022-01-01",
"2022-01-01 2022-04-01","2022-04-01 2022-06-30","2022-06-30 2022-10-01","2022-10-01 2023-01-01")
# 'kinfo' dataframe létrehozása
kinfo = data.frame()
for (i in 1:length(t)) {
kinfo = rbind(kinfo, gtrends(keyword = "kormányinfó", time = t[i])$interest_over_time)
Sys.sleep(2)
}
kinfo = read.csv("KormanyinfoGoogleTrend.csv")
kinfo$time = as.Date(kinfo$time)
# kormányinfó trend alap vonaldiagramm, 'theme_minimal'-al
ggplot(kinfo, aes(x = time))+
geom_line(aes(y = trend, color = "kormányinfó keresési trend"))+
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
c = get_eurostat(id = "namq_10_fcs",time_format = "date")
cBG = c %>%
filter(s_adj == "NSA", na_item == "P31_S14", unit == "CP_MEUR", geo == "BG", time >= "2000-01-01") %>%
arrange(time)
cBG$Q = as.factor(quarters(cBG$time))
pacf(cBG$dd_values[-c(1:2)])
forecast::auto.arima(cBG$values)

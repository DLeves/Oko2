)
df = data.frame(
time = medium_eurostat$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
rm(raw_eurostat, medium_eurostat)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))
View(df)
raw_eurostat = get_eurostat(id = 'env_ac_aigg_q', time_format = 'date')
medium_eurostat = raw_eurostat %>%
filter(
unit == 'THS_T',
geo == 'EU27_2020',
nace_r2 %in% c('A','D','HH')
)
df = data.frame(
time = medium_eurostat$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
View(medium_eurostat)
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values
df = data.frame(
time = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))
mr(a)
rm(a)
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", legend = "Változók")
View(df)
medium_eurostat = raw_eurostat %>%
filter(
unit == 'THS_T',
geo == 'EU27_2020',
nace_r2 %in% c('A','D','HH')
) %>%
arrange(time)
df = data.frame(
time = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
df = df[df$time > "2010-01-01" & df$time < "2020-01-01",]
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", legend = "Változók")
library(urca)
ca.jo(df, type = "eigen", K = 2, ecdet = "const", spec = "longrun")
ca.jo(df[,2:4], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
ca.jo(df[,c("a", "d". "hh")], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
ca.jo(df[,c("a", "d", "hh")], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
johansen_test = ca.jo(df[,c("a", "d", "hh")], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
rm(raw_eurostat, medium_eurostat)
summary(johansen_test)
library(tsDyn)
acf(df$a)
adf.test(df$a)
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
adf.test(df$a)
adf.test(df$d)
adf.test(df$hh)
df$diff_a = c(NA, diff(df$a))
df$diff_d = c(NA, diff(df$d))
df$diff_hh = c(NA, diff(df$hh))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
df$diff_a = c(NA, diff(df$a,4))
df$diff_d = c(NA, diff(df$d,4))
df$diff_a = c(NA,NA,NA,NA, diff(df$a,4)) # NANANANANA Batmaaan!
df$diff_d = c(NA,NA,NA,NA, diff(df$d,4))
df$diff_hh = c(NA,NA,NA,NA, diff(df$hh,4))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
df$diff_a = c(NA, diff(df$a,4))
df$diff_a = c(NA, diff(df$a))
df$diff_d = c(NA, diff(df$d))
df$diff_hh = c(NA, diff(df$hh))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
plot.ts(df$diff_a)
plot.ts(diff(df$a, 4))
plot.ts(diff(diff(df$a, 4)))
df$diff_a = c(NA, diff(df$a))
df$diff_d = c(NA, diff(df$d))
df$diff_hh = c(NA, diff(df$hh))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
VARselect(df[,c("diff_a", "diff_d", "diff_hh")], lag.max = 15)
VARselect(df[-1,c("diff_a", "diff_d", "diff_hh")], lag.max = 15)
plot.ts(df$diff_hh)
plot.ts(diff(df$a))
plot.ts(diff(df$a,4))
plot.ts(diff(diff(df$a,4)))
adf.test(diff(diff(df$a,4))
adf.test(diff(diff(df$a,4)))
adf.test(diff(diff(df$a,4)))
raw_eurostat = get_eurostat(id = 'env_ac_aigg_q', time_format = 'date')
medium_eurostat = raw_eurostat %>%
filter(
unit == 'THS_T',
geo == 'EU27_2020',
nace_r2 %in% c('A','D','HH')
) %>%
arrange(time)
df = data.frame(
time = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
df = df[df$time > "2010-01-01" & df$time < "2020-01-01",]
View(medium_eurostat)
View(raw_eurostat)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
df = df[df$time >= "2010-01-01" & df$time < "2020-01-01",]
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", legend = "Változók")
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
library(aod)
raw_eurostat = get_eurostat(id = 'env_ac_aigg_q', time_format = 'date')
medium_eurostat = raw_eurostat %>%
filter(
unit == 'THS_T',
geo == 'EU27_2020',
nace_r2 %in% c('A','D','HH')
) %>%
arrange(time)
df = data.frame(
time = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
df = df[df$time >= "2010-01-01" & df$time < "2020-01-01",]
df$season = as.factor(rep(c("Q1","Q2","Q3","Q4")))
rm(raw_eurostat, medium_eurostat)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", legend = "Változók")
johansen_test = ca.jo(df[,c("a", "d", "hh")], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
summary(johansen_test)
adf.test(df$a)
adf.test(df$d)
adf.test(df$hh)
df$diff_a = c(NA, diff(df$a))
df$diff_d = c(NA, diff(df$d))
df$diff_hh = c(NA, diff(df$hh))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
VARselect(df[-1,c("diff_a", "diff_d", "diff_hh")], lag.max = 10, season = 4)
VARselect(df[-1,c("a", "d", "hh")], lag.max = 10, season = 4)
var_modell = VAR(df[2:40, c("diff_hh", "diff_d", "diff_a")],
p = 1,
type = "const")
summary(var_modell)
vecm_modell = VECM(df[,c("hh", "d", "a")],
lag = 1,
r = 1)
summary(vecm_modell)
roots(var_modell)
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
plot(irf(var_modell, impulse = "diff_hh", response = "diff_d", n.ahead = 10, ortho = T))
plot(irf(vecm_modell, impulse = "diff_hh", response = "diff_d", n.ahead = 10, ortho = T))
cat("###########\nVAR modell\n###########\n")
fevd(var_modell, n.ahead = 5)
cat("###########\nVECM modell\n###########\n")
fevd(vecm_modell, n.ahead = 5)
plot.ts(diff(df$a,4))
a = diff(df$a,4)
a = diff(a)
plot.ts(a)
adf.test(a)
adf.test(diff(a))
adf.test(df$a)
adf.test(diff(df$a))
adf.test(diff(df$a,4))
adf.test(diff(diff(df$a,4)))
adf.test(diff(diff(diff(df$a,4))))
adf.test(diff(diff(diff(df$d,4))))
adf.test(diff(diff(diff(df$hh,4))))
plot.ts(diff(diff(diff(df$hh,4))))
df$diff_a = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$a))))
df$diff_a = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$a,4))))
df$diff_a = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$a,4))))
df$diff_d = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$d,4))))
df$diff_hh = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$hh,4))))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
VARselect(df[-1,c("diff_a", "diff_d", "diff_hh")], lag.max = 10, season = 4)
VARselect(df[-5,c("diff_a", "diff_d", "diff_hh")], lag.max = 4, season = 4)
VARselect(df[-1:5,c("diff_a", "diff_d", "diff_hh")], lag.max = 4, season = 4)
VARselect(df[-c(1:5),c("diff_a", "diff_d", "diff_hh")], lag.max = 4, season = 4)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 4, season = 4)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 8, season = 4)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 4)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 8)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 4)
var_modell = VAR(df[2:40, c("diff_hh", "diff_d", "diff_a")],
p = 4,
type = "const")
var_modell = VAR(df[6:40, c("diff_hh", "diff_d", "diff_a")],
p = 4,
type = "const")
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 4,
type = "const")
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 4,
type = "const")
summary(var_modell)
vecm_modell = VECM(df[,c("hh", "d", "a")],
lag = 4,
r = 1)
summary(vecm_modell)
roots(var_modell)
cat("###########\nVAR modell\n###########\n")
fevd(var_modell, n.ahead = 5)
cat("###########\nVECM modell\n###########\n")
fevd(vecm_modell, n.ahead = 5)
roots(var_modell)
lapply(resid(var_modell), function(i) bgtest(i ~ 1, order = 4))
lapply(as.data.frame(resid(var_modell)), function(i) bgtest(i ~ 1, order = 4))
roots(var_modell)
lapply(as.data.frame(resid(vecm_modell)), function(i) bgtest(i ~ 1, order = 4))
# var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
#                  p = 4,
#                  type = "const")
# summary(var_modell)
vecm_modell = VECM(df[,c("hh", "d", "a")],
lag = 2,
r = 1)
summary(vecm_modell)
lapply(as.data.frame(resid(vecm_modell)), function(i) bgtest(i ~ 1, order = 4))
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
plot(irf(vecm_modell, impulse = "diff_hh", response = "diff_d", n.ahead = 10, ortho = T))
fevd(vecm_modell, n.ahead = 5)
fevd(vecm_modell, n.ahead = 4)
serial.test(vecm_modell)
lapply(as.data.frame(resid(vecm_modell)), function(i) bgtest(i ~ 1, order = 4))
vecm_modell$coefficients
var_modell = vec2var(vecm_modell)
var_modell = vec2var(johansen_test, 1)
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
View(var_modell)
summary(var_modell)
var_modell
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 4,
type = "const")
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 2,
type = "const")
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
library(aod)
raw_eurostat = get_eurostat(id = 'env_ac_aigg_q', time_format = 'date')
medium_eurostat = raw_eurostat %>%
filter(
unit == 'THS_T',
geo == 'EU27_2020',
nace_r2 %in% c('A','D','HH')
) %>%
arrange(time)
df = data.frame(
time = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$time,
a = medium_eurostat[medium_eurostat$nace_r2 == 'A',]$values,
d = medium_eurostat[medium_eurostat$nace_r2 == 'D',]$values,
hh = medium_eurostat[medium_eurostat$nace_r2 == 'HH',]$values
)
df = df[df$time >= "2010-01-01" & df$time < "2020-01-01",]
df$season = as.factor(rep(c("Q1","Q2","Q3","Q4")))
rm(raw_eurostat, medium_eurostat)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", legend = "Változók")
johansen_test = ca.jo(df[,c("a", "d", "hh")], type = "eigen", K = 2, ecdet = "const", spec = "longrun")
summary(johansen_test)
adf.test(df$a)
adf.test(df$d)
adf.test(df$hh)
df$diff_a = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$a,4))))
df$diff_d = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$d,4))))
df$diff_hh = c(NA, NA, NA, NA, NA, NA, diff(diff(diff(df$hh,4))))
adf.test(df$diff_a)
adf.test(df$diff_d)
adf.test(df$diff_hh)
VARselect(df[-c(1:6),c("diff_a", "diff_d", "diff_hh")], lag.max = 4)
vecm_modell = VECM(df[,c("hh", "d", "a")],
lag = 2,
r = 1)
summary(vecm_modell)
lapply(as.data.frame(resid(vecm_modell)), function(i) bgtest(i ~ 1, order = 4))
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 2,
type = "const")
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2))
plot(irf(vecm_modell, impulse = "diff_hh", response = "diff_d", n.ahead = 10, ortho = T))
fevd(vecm_modell, n.ahead = 4)
roots(var_modell)
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
library(aod)
serial.test(vecm_modell)
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(2,5))
coef(var_modell$varresult$diff_hh)
wald.test(b = coef(var_modell$varresult$diff_hh),
Sigma = vcov(var_modell$varresult$diff_hh),
Terms = c(3,6))
coef(var_modell$varresult$diff_a)
wald.test(b = coef(var_modell$varresult$diff_a),
Sigma = vcov(var_modell$varresult$diff_a),
Terms = c(1,4))
wald.test(b = coef(var_modell$varresult$diff_a),
Sigma = vcov(var_modell$varresult$diff_a),
Terms = c(2,5))
wald.test(b = coef(var_modell$varresult$diff_d),
Sigma = vcov(var_modell$varresult$diff_d),
Terms = c(1,4))
coef(var_modell$varresult$diff_d)
wald.test(b = coef(var_modell$varresult$diff_d),
Sigma = vcov(var_modell$varresult$diff_d),
Terms = c(1,4))
wald.test(b = coef(var_modell$varresult$diff_d),
Sigma = vcov(var_modell$varresult$diff_d),
Terms = c(3,6))
var_modell = VAR(df[7:40, c("diff_hh", "diff_d", "diff_a")],
p = 2,
type = "const")
coef(var_modell$varresult$diff_d)
wald.test(b = coef(var_modell$varresult$diff_d),
Sigma = vcov(var_modell$varresult$diff_d),
Terms = c(1,4))
knitr::opts_chunk$set(echo = TRUE)
library(eurostat)
library(tidyverse)
library(lmtest)
library(aTSA)
library(forecast)
library(vars)
library(urca)
library(tsDyn)
library(aod)
ggplot(df, aes(time))+
geom_line(aes(y = a, color = 'A'))+
geom_line(aes(y = d, color = 'D'))+
geom_line(aes(y = hh, color = 'HH'))+
labs(x = "Idő", y = "Ezer tonna ÜHG", color = "Változók")
# working directory beállítása
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# libraryk
library(quantmod)  #Yahoo finance adatokhoz
library(gtrendsR)  #Google trends adatokhoz
library(tidyverse) #ggplot2 + más packegek, ha kellenének
library(aTSA) # adf.test-hez
library(lmtest) # bgtest, coeftest...
library(vars) # var modellhez
# Yahoo finance-rők az árfolyam lekérése 2021. jan 1-től 2022. dec 31-ig
eurxts = getSymbols("EURHUF=X", src = "yahoo", from = "2020-01-01", to = "2023-05-12", auto.assign = F)
usdxts = getSymbols("USDHUF=X", src = "yahoo", from = "2020-01-01", to = "2023-05-12", auto.assign = F)
# Kormányinfó dátumok
kinfodummy = read.csv("Kormanyinfo.csv")
# a Yahoo finance-es adatokből dataframe-ként az idő és az 'highest'(ezt közösen beszéljük meg melyik legyen)
arfolyam = data.frame(time = index(eurxts), eurhuf = as.numeric(eurxts$`EURHUF=X.High`), usdhuf = as.numeric(usdxts$`USDHUF=X.High`), kinfodummy = kinfodummy$Kormanyinfo)
rm(eurxts, usdxts)
# EUR/HUF, USD/HUF alap vonaldiagramm, 'theme_minimal'-al
kinfo = arfolyam %>% filter(kinfo == 1) # azért van ilyen data frame, hogy tudjam ábrázolni a kormányinfó pontokat
ggplot()+
geom_line(data = arfolyam, aes(x = time, y = eurhuf, color = "EUR/HUF árfolyam"))+
geom_line(data = arfolyam, aes(x = time, y = usdhuf, color = "USD/HUF árfolyam"))+
geom_point(data = kinfo, aes(x = time, y = eurhuf, color = "Kormányinfó"))+
geom_point(data = kinfo, aes(x = time, y = usdhuf, color = "Kormányinfó"))+
theme_minimal()
rm(kinfo)
rm(kinfodummy)
rm(list = ls)
rm(list = ls())
# Yahoo finance-rők az árfolyam lekérése 2021. jan 1-től 2022. dec 31-ig
eurxts = getSymbols("EURHUF=X", src = "yahoo", from = "2020-01-01", to = "2023-05-12", auto.assign = F)
usdxts = getSymbols("USDHUF=X", src = "yahoo", from = "2020-01-01", to = "2023-05-12", auto.assign = F)
# Kormányinfó dátumok
kinfodummy = read.csv("Kormanyinfo.csv")
# a Yahoo finance-es adatokből dataframe-ként az idő és az 'highest'(ezt közösen beszéljük meg melyik legyen)
arfolyam = data.frame(time = index(eurxts), eurhuf = as.numeric(eurxts$`EURHUF=X.High`), usdhuf = as.numeric(usdxts$`USDHUF=X.High`), kinfodummy = kinfodummy$Kormanyinfo)
rm(eurxts, usdxts)
# EUR/HUF, USD/HUF alap vonaldiagramm, 'theme_minimal'-al
kinfo = arfolyam %>% filter(kinfo == 1) # azért van ilyen data frame, hogy tudjam ábrázolni a kormányinfó pontokat
ggplot()+
geom_line(data = arfolyam, aes(x = time, y = eurhuf, color = "EUR/HUF árfolyam"))+
geom_line(data = arfolyam, aes(x = time, y = usdhuf, color = "USD/HUF árfolyam"))+
geom_point(data = kinfo, aes(x = time, y = eurhuf, color = "Kormányinfó"))+
geom_point(data = kinfo, aes(x = time, y = usdhuf, color = "Kormányinfó"))+
theme_minimal()
rm(kinfodummy)
# 6. lépés -------------------------
coeftest(forecast::auto.arima(arfolyam$eurhuf))
coeftest(forecast::auto.arima(arfolyam$eurhuf, xreg = arfolyam$kinfodummy))
coeftest(forecast::auto.arima(arfolyam$eurhuf, xreg = arfolyam$gtrend))
coeftest(forecast::auto.arima(arfolyam$usdhuf))
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$kinfodummy))
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend))
usd = forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend)
eur = forecast::auto.arima(arfolyam$eurhuf, xreg = arfolyam$kinfodummy)
summary(eur)
coeftest(eur)
coeftest(eur)
coeftest(usd)
forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend)
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend))
coeftest(forecast::auto.arima(arfolyam$usdhuf))
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$kinfodummy))
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend))
usd
kinfo = read.csv("KormanyinfoGoogleTrend.csv")
arfolyam$gtrend = kinfo$trend
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend))
usd =
usd = forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend)
coeftest(forecast::auto.arima(arfolyam$usdhuf, xreg = arfolyam$gtrend))
View(arfolyam)
